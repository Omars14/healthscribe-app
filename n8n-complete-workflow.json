{
  "name": "Complete Audio Transcription with Website Integration",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "transcribe",
        "responseMode": "onReceived",
        "responseData": "allEntries",
        "options": {}
      },
      "id": "webhook-receiver",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "transcribe-audio"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({ message: 'Transcription process started', id: $json.id, status: 'processing' }) }}",
        "options": {}
      },
      "id": "respond-immediately",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{ $json.body }}",
        "options": {}
      },
      "id": "extract-data",
      "name": "Extract JSON Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/tmp/audio_{{ $json.id }}.{{ $json.format || 'webm' }}",
        "dataPropertyName": "audio",
        "options": {
          "encoding": "base64"
        }
      },
      "id": "save-audio-file",
      "name": "Write Binary File",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [850, 300]
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "file": "={{ $binary.data }}",
        "options": {
          "language": "={{ $json.language || 'en' }}",
          "prompt": "={{ $json.prompt || '' }}",
          "temperature": "={{ $json.temperature || 0 }}",
          "responseFormat": "verbose_json"
        }
      },
      "id": "openai-transcribe",
      "name": "OpenAI Transcribe Audio",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [1050, 300],
      "credentials": {
        "openAiApi": {
          "id": "1",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "transcription_text",
              "value": "={{ $json.text }}"
            },
            {
              "name": "status",
              "value": "completed"
            },
            {
              "name": "completed_at",
              "value": "={{ new Date().toISOString() }}"
            },
            {
              "name": "language",
              "value": "={{ $json.language || 'en' }}"
            },
            {
              "name": "duration",
              "value": "={{ $json.duration }}"
            }
          ],
          "number": [],
          "boolean": [],
          "json": [
            {
              "name": "segments",
              "value": "={{ JSON.stringify($json.segments || []) }}"
            },
            {
              "name": "metadata",
              "value": "={{ JSON.stringify({ processed_at: new Date().toISOString(), model: 'whisper-1', workflow: 'optimized' }) }}"
            }
          ]
        },
        "options": {}
      },
      "id": "prepare-data",
      "name": "Prepare Update Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [1250, 300]
    },
    {
      "parameters": {
        "operation": "update",
        "schema": "public",
        "table": "transcriptions",
        "updateKey": "id",
        "columns": "transcription_text,status,completed_at,segments,language,duration,metadata",
        "options": {
          "returnFields": "*"
        }
      },
      "id": "update-database",
      "name": "Supabase Update",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1450, 300],
      "credentials": {
        "supabaseApi": {
          "id": "2",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $node['extract-data'].json.callbackUrl || 'https://your-domain.com/api/transcription-result-v2' }}",
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({ uploadId: $node['extract-data'].json.id, transcription: $node['openai-transcribe'].json.text, success: true, cleaned: false, fileName: $node['extract-data'].json.fileName, doctorName: $node['extract-data'].json.doctorName, patientName: $node['extract-data'].json.patientName, documentType: $node['extract-data'].json.documentType, audioUrl: $node['extract-data'].json.audioUrl, fileSize: $node['extract-data'].json.fileSize, userId: $node['extract-data'].json.userId, storageProvider: 'supabase', segments: $node['openai-transcribe'].json.segments, language: $node['openai-transcribe'].json.language, duration: $node['openai-transcribe'].json.duration }) }}",
        "options": {
          "timeout": 30000,
          "retry": {
            "retryOnFail": true,
            "maxRetries": 3,
            "retryInterval": 5000
          }
        }
      },
      "id": "notify-website",
      "name": "Notify Website",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1650, 300],
      "continueOnFail": true
    },
    {
      "parameters": {
        "operation": "update",
        "schema": "public",
        "table": "transcriptions",
        "columns": "status,error,updated_at",
        "updateKey": "id",
        "options": {}
      },
      "id": "update-error",
      "name": "Update Error Status",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1250, 500],
      "credentials": {
        "supabaseApi": {
          "id": "2",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $node['extract-data'].json.callbackUrl || 'https://your-domain.com/api/transcription-result-v2' }}",
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({ uploadId: $node['extract-data'].json.id, success: false, error: $error.message || 'Transcription failed', fileName: $node['extract-data'].json.fileName, doctorName: $node['extract-data'].json.doctorName, patientName: $node['extract-data'].json.patientName, documentType: $node['extract-data'].json.documentType }) }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "notify-error",
      "name": "Notify Error to Website",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1450, 500],
      "continueOnFail": true
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          },
          {
            "node": "Extract JSON Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract JSON Data": {
      "main": [
        [
          {
            "node": "Write Binary File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write Binary File": {
      "main": [
        [
          {
            "node": "OpenAI Transcribe Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Transcribe Audio": {
      "main": [
        [
          {
            "node": "Prepare Update Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Error Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Update Data": {
      "main": [
        [
          {
            "node": "Supabase Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Update": {
      "main": [
        [
          {
            "node": "Notify Website",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Error Status": {
      "main": [
        [
          {
            "node": "Notify Error to Website",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "saveDataSuccessExecution": "all",
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "executionTimeout": 900,
    "errorWorkflow": ""
  },
  "versionId": "complete-v1",
  "id": "complete-transcription",
  "meta": {
    "instanceId": "n8n"
  },
  "tags": ["transcription", "openai", "supabase", "production"]
}
