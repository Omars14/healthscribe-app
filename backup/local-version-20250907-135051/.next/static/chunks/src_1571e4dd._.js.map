{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Omar/Desktop/AI%20website%20Latest/dashboard-next/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || ''\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || ''\n\n// Client for regular app operations (uses anon key)\nexport const supabase = supabaseUrl && supabaseAnonKey\n  ? createClient(supabaseUrl, supabaseAnonKey, {\n      auth: {\n        persistSession: true,\n        autoRefreshToken: true,\n        detectSessionInUrl: true,\n        flowType: 'pkce' // Use PKCE flow for better security\n      },\n      global: {\n        headers: {\n          'X-Client-Info': 'healthscribe-dashboard'\n        }\n      }\n    })\n  : null as any\n\n// Admin client is only available on the server side\n// Use this function in server-side code (API routes) only\nexport const getSupabaseAdmin = () => {\n  // Only run on server side\n  if (typeof window !== 'undefined') {\n    console.warn('⚠️ getSupabaseAdmin() should only be used on the server side')\n    return null\n  }\n\n  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || ''\n\n  if (!supabaseUrl || !supabaseServiceKey) {\n    console.warn('⚠️ Supabase admin client: Missing URL or service key')\n    return null\n  }\n\n  return createClient(supabaseUrl, supabaseServiceKey, {\n    auth: {\n      persistSession: true,\n      autoRefreshToken: true,\n      detectSessionInUrl: true,\n      flowType: 'pkce'\n    },\n    global: {\n      headers: {\n        'X-Client-Info': 'healthscribe-dashboard-admin'\n      }\n    }\n  })\n}\n\n// Debug logging for client initialization (only in development)\nif (process.env.NODE_ENV === 'development') {\n  console.log('🔧 Supabase client initialization:')\n  console.log('  - URL present:', !!supabaseUrl)\n  console.log('  - Anon key present:', !!supabaseAnonKey)\n  console.log('  - Regular client initialized:', !!supabase)\n}\n\nexport type Database = {\n  public: {\n    Tables: {\n      transcriptions: {\n        Row: {\n          id: string\n          file_name: string | null\n          doctor_name: string | null\n          patient_name: string | null\n          document_type: string | null\n          transcription_text: string | null\n          user_id: string | null\n          upload_id: string | null\n          created_at: string\n          updated_at: string\n          audio_url: string | null\n          storage_provider: string | null\n          file_size: number | null\n          upload_status: string | null\n          audio_file_name: string | null\n        }\n        Insert: {\n          id?: string\n          file_name?: string | null\n          doctor_name?: string | null\n          patient_name?: string | null\n          document_type?: string | null\n          transcription_text?: string | null\n          user_id?: string | null\n          upload_id?: string | null\n          created_at?: string\n          updated_at?: string\n          audio_url?: string | null\n          storage_provider?: string | null\n          file_size?: number | null\n          upload_status?: string | null\n          audio_file_name?: string | null\n        }\n        Update: {\n          id?: string\n          file_name?: string | null\n          doctor_name?: string | null\n          patient_name?: string | null\n          document_type?: string | null\n          transcription_text?: string | null\n          user_id?: string | null\n          upload_id?: string | null\n          created_at?: string\n          updated_at?: string\n          audio_url?: string | null\n          storage_provider?: string | null\n          file_size?: number | null\n          upload_status?: string | null\n          audio_file_name?: string | null\n        }\n      }\n    }\n  }\n}\n"],"names":[],"mappings":";;;;AAEoB;AAFpB;;AAEA,MAAM,cAAc,gFAAwC;AAC5D,MAAM,kBAAkB,wPAA6C;AAG9D,MAAM,WAAW,uCACpB,CAAA,GAAA,0LAAA,CAAA,eAAY,AAAD,EAAE,aAAa,iBAAiB;IACzC,MAAM;QACJ,gBAAgB;QAChB,kBAAkB;QAClB,oBAAoB;QACpB,UAAU,OAAO,oCAAoC;IACvD;IACA,QAAQ;QACN,SAAS;YACP,iBAAiB;QACnB;IACF;AACF,KACA;AAIG,MAAM,mBAAmB;IAC9B,0BAA0B;IAC1B,wCAAmC;QACjC,QAAQ,IAAI,CAAC;QACb,OAAO;IACT;;;IAEA,MAAM;AAoBR;AAEA,gEAAgE;AAChE,wCAA4C;IAC1C,QAAQ,GAAG,CAAC;IACZ,QAAQ,GAAG,CAAC,oBAAoB,CAAC,CAAC;IAClC,QAAQ,GAAG,CAAC,yBAAyB,CAAC,CAAC;IACvC,QAAQ,GAAG,CAAC,mCAAmC,CAAC,CAAC;AACnD","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Omar/Desktop/AI%20website%20Latest/dashboard-next/src/contexts/AuthContext.tsx"],"sourcesContent":["'use client'\n\nimport React, { createContext, useContext, useEffect, useState } from 'react'\nimport { User, Session } from '@supabase/supabase-js'\nimport { supabase } from '@/lib/supabase'\nimport { useRouter } from 'next/navigation'\nimport { UserProfile, UserRole } from '@/types/review'\n\ninterface AuthContextType {\n  user: User | null\n  session: Session | null\n  userProfile: UserProfile | null\n  loading: boolean\n  signIn: (email: string, password: string) => Promise<{ error: Error | null }>\n  signUp: (email: string, password: string, metadata?: Record<string, unknown>) => Promise<{ error: Error | null }>\n  signOut: () => Promise<void>\n  resetPassword: (email: string) => Promise<{ error: Error | null }>\n  updateUserRole: (userId: string, role: UserRole) => Promise<{ error: Error | null }>\n  assignEditor: (transcriptionistId: string, editorId: string) => Promise<{ error: Error | null }>\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null)\n  const [session, setSession] = useState<Session | null>(null)\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null)\n  const [loading, setLoading] = useState(true)\n  const router = useRouter()\n\n  // Fetch user profile from database\n  const fetchUserProfile = async (userId: string) => {\n    if (!supabase) {\n      console.log('🔄 AuthContext: No Supabase client available')\n      setLoading(false)\n      return\n    }\n\n    console.log('🔄 AuthContext: Fetching profile for user:', userId)\n\n    try {\n      console.log('🔄 AuthContext: Querying user_profiles table...')\n\n      // Add timeout to prevent hanging queries\n      const timeoutPromise = new Promise((_, reject) =>\n        setTimeout(() => reject(new Error('Profile query timeout')), 10000)\n      )\n\n      // Query user profile directly with timeout\n      const queryPromise = supabase\n        .from('user_profiles')\n        .select('*')\n        .eq('id', userId)\n        .single()\n\n      console.log('🔄 AuthContext: Starting profile query with 10s timeout...')\n      const { data, error } = await Promise.race([queryPromise, timeoutPromise]) as any\n\n      console.log('🔄 AuthContext: Profile query result:', {\n        hasData: !!data,\n        hasError: !!error,\n        errorCode: error?.code,\n        errorMessage: error?.message\n      })\n\n      if (error) {\n        console.log('🔄 AuthContext: Profile fetch error:', error.message)\n        \n        // Handle timeout or RLS issues\n        if (error.message === 'Profile query timeout') {\n          console.log('🔄 AuthContext: Query timed out - likely RLS policy issue')\n          console.log('🔄 AuthContext: Proceeding without profile to avoid infinite loading')\n          setUserProfile(null)\n          setLoading(false)\n          return\n        }\n        \n        // If profile doesn't exist, create one\n        if (error.code === 'PGRST116') {\n          console.log('🔄 AuthContext: Profile not found, creating new profile...')\n          const { data: userData } = await supabase.auth.getUser()\n\n          console.log('🔄 AuthContext: Current user data:', {\n            hasUser: !!userData?.user,\n            userEmail: userData?.user?.email,\n            userName: userData?.user?.user_metadata?.name\n          })\n\n          if (userData?.user) {\n            console.log('🔄 AuthContext: Creating new user profile...')\n\n            try {\n              const createPromise = supabase\n                .from('user_profiles')\n                .insert({\n                  id: userId,\n                  email: userData.user.email!,\n                  full_name: userData.user.user_metadata?.name || null,\n                  role: 'transcriptionist'\n                })\n                .select()\n                .single()\n\n              const { data: newProfile, error: createError } = await Promise.race([\n                createPromise,\n                new Promise((_, reject) => setTimeout(() => reject(new Error('Profile creation timeout')), 5000))\n              ]) as any\n\n              console.log('🔄 AuthContext: Profile creation result:', {\n                hasProfile: !!newProfile,\n                hasCreateError: !!createError,\n                createErrorMessage: createError?.message\n              })\n\n              if (!createError && newProfile) {\n                console.log('🔄 AuthContext: Profile created successfully:', newProfile)\n                setUserProfile(newProfile as UserProfile)\n              } else if (createError?.message === 'Profile creation timeout') {\n                console.log('🔄 AuthContext: Profile creation timed out, proceeding without profile')\n                setUserProfile(null)\n              } else {\n                console.log('🔄 AuthContext: Profile creation failed, proceeding without profile')\n                setUserProfile(null)\n              }\n            } catch (createErr) {\n              console.log('🔄 AuthContext: Profile creation exception, proceeding without profile:', createErr)\n              setUserProfile(null)\n            }\n          } else {\n            console.log('🔄 AuthContext: No user data available, proceeding without profile')\n            setUserProfile(null)\n          }\n        } else {\n          console.log('🔄 AuthContext: Other profile error, proceeding without profile:', error.message)\n          setUserProfile(null)\n        }\n      } else if (data) {\n        console.log('🔄 AuthContext: Profile fetched successfully:', data)\n        setUserProfile(data as UserProfile)\n      }\n\n      console.log('🔄 AuthContext: Profile fetch operation completed')\n      setLoading(false)\n    } catch (error) {\n      console.error('🔄 AuthContext: Exception in fetchUserProfile:', error)\n      \n      // Handle timeout specifically\n      if (error.message === 'Profile query timeout') {\n        console.log('🔄 AuthContext: Profile query timed out - this suggests RLS policy issues')\n        console.log('🔄 AuthContext: User can still access the app, but profile features may be limited')\n      }\n      \n      // If profile fetching fails completely, proceed without profile\n      console.log('🔄 AuthContext: Proceeding without profile due to error')\n      setUserProfile(null)\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    if (!supabase) {\n      setLoading(false)\n      return\n    }\n\n    // Check for existing session manually\n    const checkSession = async () => {\n      try {\n        const { data: { session }, error } = await supabase.auth.getSession()\n        if (error) {\n          console.error('Session check error:', error)\n          setLoading(false)\n          return\n        }\n\n        setSession(session)\n        setUser(session?.user ?? null)\n        if (session?.user) {\n          await fetchUserProfile(session.user.id)\n        }\n      } catch (error) {\n        console.error('Session check failed:', error)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    checkSession()\n\n    // Listen for auth changes\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      console.log('🔄 AuthContext: Auth state changed:', {\n        event,\n        hasSession: !!session,\n        hasUser: !!session?.user,\n        userEmail: session?.user?.email,\n        sessionExpiry: session?.expires_at\n      })\n\n      setSession(session)\n      setUser(session?.user ?? null)\n\n      if (session?.user) {\n        console.log('🔄 AuthContext: User logged in, fetching profile...')\n        await fetchUserProfile(session.user.id)\n      } else {\n        console.log('🔄 AuthContext: User logged out, clearing profile')\n        setUserProfile(null)\n      }\n\n      setLoading(false)\n    })\n\n    return () => subscription.unsubscribe()\n  }, [])\n\n  // Separate effect to handle redirects after authentication\n  useEffect(() => {\n    // Only redirect if we're not in the middle of loading and have a user\n    // Profile is optional - user can still access the app without a profile\n    if (!loading && user && typeof window !== 'undefined') {\n      const currentPath = window.location.pathname\n      const isAuthPage = currentPath === '/login' || currentPath === '/'\n\n      console.log('🔄 AuthContext: Checking redirect conditions:', {\n        currentPath,\n        isAuthPage,\n        hasUser: !!user,\n        hasProfile: !!userProfile,\n        loading\n      })\n\n      // If user is authenticated and on auth pages, redirect to dashboard\n      if (isAuthPage) {\n        console.log('🔄 AuthContext: User authenticated on auth page, redirecting to dashboard...')\n        // Use replace to avoid back button issues\n        router.replace('/dashboard')\n      }\n      // If user is authenticated and on signup page, redirect to dashboard\n      else if (currentPath === '/signup') {\n        console.log('🔄 AuthContext: User authenticated on signup page, redirecting to dashboard...')\n        router.replace('/dashboard')\n      }\n    }\n  }, [user, loading, router]) // Removed userProfile dependency\n\n  const signIn = async (email: string, password: string) => {\n    if (!supabase) return { error: new Error('Supabase client not available') }\n\n    try {\n      console.log('🔐 Attempting login for:', email)\n\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      })\n\n      if (error) {\n        console.error('🔐 Login error:', error)\n        throw error\n      }\n\n      console.log('🔐 Login successful, user:', data.user?.email)\n      console.log('🔐 Session data:', { hasSession: !!data.session, sessionExpiry: data.session?.expires_at })\n\n      // Wait a moment for the auth state to propagate\n      await new Promise(resolve => setTimeout(resolve, 100))\n\n      console.log('🔐 Redirecting to dashboard...')\n      router.push('/dashboard')\n      return { error: null }\n    } catch (error) {\n      console.error('🔐 Login failed:', error)\n      return { error: error as Error }\n    }\n  }\n\n  const signUp = async (email: string, password: string, metadata?: Record<string, unknown>) => {\n    if (!supabase) return { error: new Error('Supabase client not available') }\n\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: metadata,\n          emailRedirectTo: `${process.env.NEXT_PUBLIC_SITE_URL || 'https://healthscribepro.vercel.app'}/login`,\n        },\n      })\n\n      if (error) throw error\n\n      return { error: null }\n    } catch (error) {\n      return { error: error as Error }\n    }\n  }\n\n  const signOut = async () => {\n    if (!supabase) return\n\n    try {\n      const { error } = await supabase.auth.signOut()\n      if (error) throw error\n      router.push('/login')\n    } catch (error) {\n      console.error('Sign out error:', error)\n    }\n  }\n\n  const resetPassword = async (email: string) => {\n    if (!supabase) return { error: new Error('Supabase client not available') }\n\n    try {\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/reset-password`,\n      })\n\n      if (error) throw error\n\n      return { error: null }\n    } catch (error) {\n      return { error: error as Error }\n    }\n  }\n\n  const updateUserRole = async (userId: string, role: UserRole) => {\n    if (!supabase) return { error: new Error('Supabase client not available') }\n\n    try {\n      const { error } = await supabase\n        .from('user_profiles')\n        .update({ role })\n        .eq('id', userId)\n\n      if (error) throw error\n\n      // Refresh profile if updating current user\n      if (userId === user?.id) {\n        await fetchUserProfile(userId)\n      }\n\n      return { error: null }\n    } catch (error) {\n      return { error: error as Error }\n    }\n  }\n\n  const assignEditor = async (transcriptionistId: string, editorId: string) => {\n    if (!supabase) return { error: new Error('Supabase client not available') }\n\n    try {\n      const { error } = await supabase\n        .from('user_profiles')\n        .update({ assigned_editor_id: editorId })\n        .eq('id', transcriptionistId)\n\n      if (error) throw error\n\n      return { error: null }\n    } catch (error) {\n      return { error: error as Error }\n    }\n  }\n\n  const value = {\n    user,\n    session,\n    userProfile,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n    resetPassword,\n    updateUserRole,\n    assignEditor,\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext)\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 446, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Omar/Desktop/AI%20website%20Latest/dashboard-next/src/app/providers.tsx"],"sourcesContent":["'use client'\r\n\r\nimport { AuthProvider } from '@/contexts/AuthContext'\r\n\r\nexport function Providers({ children }: { children: React.ReactNode }) {\r\n  return <AuthProvider>{children}</AuthProvider>\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIO,SAAS,UAAU,KAA2C;QAA3C,EAAE,QAAQ,EAAiC,GAA3C;IACxB,qBAAO,6LAAC,kIAAA,CAAA,eAAY;kBAAE;;;;;;AACxB;KAFgB","debugId":null}}]
}