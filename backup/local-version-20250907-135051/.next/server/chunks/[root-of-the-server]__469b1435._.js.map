{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Omar/Desktop/AI%20website%20Latest/dashboard-next/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || ''\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || ''\n\n// Client for regular app operations (uses anon key)\nexport const supabase = supabaseUrl && supabaseAnonKey\n  ? createClient(supabaseUrl, supabaseAnonKey, {\n      auth: {\n        persistSession: true,\n        autoRefreshToken: true,\n        detectSessionInUrl: true,\n        flowType: 'pkce' // Use PKCE flow for better security\n      },\n      global: {\n        headers: {\n          'X-Client-Info': 'healthscribe-dashboard'\n        }\n      }\n    })\n  : null as any\n\n// Admin client is only available on the server side\n// Use this function in server-side code (API routes) only\nexport const getSupabaseAdmin = () => {\n  // Only run on server side\n  if (typeof window !== 'undefined') {\n    console.warn('‚ö†Ô∏è getSupabaseAdmin() should only be used on the server side')\n    return null\n  }\n\n  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || ''\n\n  if (!supabaseUrl || !supabaseServiceKey) {\n    console.warn('‚ö†Ô∏è Supabase admin client: Missing URL or service key')\n    return null\n  }\n\n  return createClient(supabaseUrl, supabaseServiceKey, {\n    auth: {\n      persistSession: true,\n      autoRefreshToken: true,\n      detectSessionInUrl: true,\n      flowType: 'pkce'\n    },\n    global: {\n      headers: {\n        'X-Client-Info': 'healthscribe-dashboard-admin'\n      }\n    }\n  })\n}\n\n// Debug logging for client initialization (only in development)\nif (process.env.NODE_ENV === 'development') {\n  console.log('üîß Supabase client initialization:')\n  console.log('  - URL present:', !!supabaseUrl)\n  console.log('  - Anon key present:', !!supabaseAnonKey)\n  console.log('  - Regular client initialized:', !!supabase)\n}\n\nexport type Database = {\n  public: {\n    Tables: {\n      transcriptions: {\n        Row: {\n          id: string\n          file_name: string | null\n          doctor_name: string | null\n          patient_name: string | null\n          document_type: string | null\n          transcription_text: string | null\n          user_id: string | null\n          upload_id: string | null\n          created_at: string\n          updated_at: string\n          audio_url: string | null\n          storage_provider: string | null\n          file_size: number | null\n          upload_status: string | null\n          audio_file_name: string | null\n        }\n        Insert: {\n          id?: string\n          file_name?: string | null\n          doctor_name?: string | null\n          patient_name?: string | null\n          document_type?: string | null\n          transcription_text?: string | null\n          user_id?: string | null\n          upload_id?: string | null\n          created_at?: string\n          updated_at?: string\n          audio_url?: string | null\n          storage_provider?: string | null\n          file_size?: number | null\n          upload_status?: string | null\n          audio_file_name?: string | null\n        }\n        Update: {\n          id?: string\n          file_name?: string | null\n          doctor_name?: string | null\n          patient_name?: string | null\n          document_type?: string | null\n          transcription_text?: string | null\n          user_id?: string | null\n          upload_id?: string | null\n          created_at?: string\n          updated_at?: string\n          audio_url?: string | null\n          storage_provider?: string | null\n          file_size?: number | null\n          upload_status?: string | null\n          audio_file_name?: string | null\n        }\n      }\n    }\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,cAAc,gFAAwC;AAC5D,MAAM,kBAAkB,wPAA6C;AAG9D,MAAM,WAAW,uCACpB,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa,iBAAiB;IACzC,MAAM;QACJ,gBAAgB;QAChB,kBAAkB;QAClB,oBAAoB;QACpB,UAAU,OAAO,oCAAoC;IACvD;IACA,QAAQ;QACN,SAAS;YACP,iBAAiB;QACnB;IACF;AACF,KACA;AAIG,MAAM,mBAAmB;IAC9B,0BAA0B;IAC1B;;IAKA,MAAM,qBAAqB,QAAQ,GAAG,CAAC,yBAAyB,IAAI;IAEpE,IAAI,CAAC,eAAe,CAAC,oBAAoB;QACvC,QAAQ,IAAI,CAAC;QACb,OAAO;IACT;IAEA,OAAO,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa,oBAAoB;QACnD,MAAM;YACJ,gBAAgB;YAChB,kBAAkB;YAClB,oBAAoB;YACpB,UAAU;QACZ;QACA,QAAQ;YACN,SAAS;gBACP,iBAAiB;YACnB;QACF;IACF;AACF;AAEA,gEAAgE;AAChE,wCAA4C;IAC1C,QAAQ,GAAG,CAAC;IACZ,QAAQ,GAAG,CAAC,oBAAoB,CAAC,CAAC;IAClC,QAAQ,GAAG,CAAC,yBAAyB,CAAC,CAAC;IACvC,QAAQ,GAAG,CAAC,mCAAmC,CAAC,CAAC;AACnD","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Omar/Desktop/AI%20website%20Latest/dashboard-next/src/app/api/check-profile/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\r\nimport { createServerClient } from '@supabase/ssr'\r\nimport { getSupabaseAdmin } from '@/lib/supabase'\r\nimport { cookies } from 'next/headers'\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    console.log('üîç API: Checking user profile...')\r\n\r\n    // Create server-side Supabase client with cookies\r\n    const cookieStore = await cookies()\r\n    const supabase = createServerClient(\r\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n      {\r\n        cookies: {\r\n          getAll() {\r\n            return cookieStore.getAll()\r\n          },\r\n          setAll(cookiesToSet) {\r\n            try {\r\n              cookiesToSet.forEach(({ name, value, options }) =>\r\n                cookieStore.set(name, value, options)\r\n              )\r\n            } catch {\r\n              // The `setAll` method was called from a Server Component.\r\n              // This can be ignored if you have middleware refreshing\r\n              // user sessions.\r\n            }\r\n          },\r\n        },\r\n      }\r\n    )\r\n\r\n    // Get current user from session\r\n    const { data: { user }, error: userError } = await supabase.auth.getUser()\r\n\r\n    if (userError || !user) {\r\n      console.log('‚ùå API: No authenticated user')\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'No authenticated user',\r\n        authenticated: false\r\n      }, { status: 401 })\r\n    }\r\n\r\n    console.log('‚úÖ API: User authenticated:', user.id, user.email)\r\n\r\n    const supabaseAdmin = getSupabaseAdmin()\r\n    if (!supabaseAdmin) {\r\n      console.log('‚ùå API: Supabase admin client not available')\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Supabase admin client not available',\r\n        suggestion: 'Check SUPABASE_SERVICE_ROLE_KEY environment variable'\r\n      }, { status: 500 })\r\n    }\r\n\r\n    // Check if profile exists\r\n    const { data: profile, error: profileError } = await supabaseAdmin\r\n      .from('user_profiles')\r\n      .select('*')\r\n      .eq('id', user.id)\r\n      .single()\r\n\r\n    if (profile) {\r\n      console.log('‚úÖ API: Profile exists:', profile)\r\n      return NextResponse.json({\r\n        success: true,\r\n        profileExists: true,\r\n        profile: profile\r\n      })\r\n    }\r\n\r\n    if (profileError?.code === 'PGRST116') {\r\n      console.log('‚ö†Ô∏è API: Profile not found, creating one...')\r\n\r\n      // Create profile\r\n      const { data: newProfile, error: createError } = await supabaseAdmin\r\n        .from('user_profiles')\r\n        .insert({\r\n          id: user.id,\r\n          email: user.email!,\r\n          full_name: user.user_metadata?.name || null,\r\n          role: 'transcriptionist'\r\n        })\r\n        .select()\r\n        .single()\r\n\r\n      if (createError) {\r\n        console.log('‚ùå API: Profile creation error:', createError)\r\n        return NextResponse.json({\r\n          success: false,\r\n          error: createError.message,\r\n          profileExists: false\r\n        }, { status: 500 })\r\n      }\r\n\r\n      console.log('‚úÖ API: Profile created successfully:', newProfile)\r\n      return NextResponse.json({\r\n        success: true,\r\n        profileExists: false,\r\n        profile: newProfile,\r\n        created: true\r\n      })\r\n    }\r\n\r\n    console.log('‚ùå API: Profile query error:', profileError)\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: profileError?.message || 'Unknown error',\r\n      profileExists: false\r\n    }, { status: 500 })\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå API: Unexpected error:', error)\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: error instanceof Error ? error.message : 'Unexpected error'\r\n    }, { status: 500 })\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}