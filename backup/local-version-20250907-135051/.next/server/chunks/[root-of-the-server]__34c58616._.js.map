{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Omar/Desktop/AI%20website%20Latest/dashboard-next/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || ''\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || ''\n\n// Create a single Supabase client instance for the entire app\nexport const supabase = supabaseUrl && supabaseAnonKey\n  ? createClient(supabaseUrl, supabaseAnonKey, {\n      auth: {\n        persistSession: true,\n        autoRefreshToken: true,\n        detectSessionInUrl: true\n      }\n    })\n  : null as any\n\nexport type Database = {\n  public: {\n    Tables: {\n      transcriptions: {\n        Row: {\n          id: string\n          file_name: string | null\n          doctor_name: string | null\n          patient_name: string | null\n          document_type: string | null\n          transcription_text: string | null\n          user_id: string | null\n          upload_id: string | null\n          created_at: string\n          updated_at: string\n          audio_url: string | null\n          storage_provider: string | null\n          file_size: number | null\n          upload_status: string | null\n          audio_file_name: string | null\n        }\n        Insert: {\n          id?: string\n          file_name?: string | null\n          doctor_name?: string | null\n          patient_name?: string | null\n          document_type?: string | null\n          transcription_text?: string | null\n          user_id?: string | null\n          upload_id?: string | null\n          created_at?: string\n          updated_at?: string\n          audio_url?: string | null\n          storage_provider?: string | null\n          file_size?: number | null\n          upload_status?: string | null\n          audio_file_name?: string | null\n        }\n        Update: {\n          id?: string\n          file_name?: string | null\n          doctor_name?: string | null\n          patient_name?: string | null\n          document_type?: string | null\n          transcription_text?: string | null\n          user_id?: string | null\n          upload_id?: string | null\n          created_at?: string\n          updated_at?: string\n          audio_url?: string | null\n          storage_provider?: string | null\n          file_size?: number | null\n          upload_status?: string | null\n          audio_file_name?: string | null\n        }\n      }\n    }\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,gFAAwC;AAC5D,MAAM,kBAAkB,wPAA6C;AAG9D,MAAM,WAAW,uCACpB,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa,iBAAiB;IACzC,MAAM;QACJ,gBAAgB;QAChB,kBAAkB;QAClB,oBAAoB;IACtB;AACF,KACA","debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Omar/Desktop/AI%20website%20Latest/dashboard-next/src/app/api/transcription-status/route.ts"],"sourcesContent":["import { NextRequest } from 'next/server'\r\nimport { supabase } from '@/lib/supabase'\r\n\r\nexport const runtime = 'nodejs'\r\nexport const dynamic = 'force-dynamic'\r\n\r\nexport async function GET(request: NextRequest) {\r\n  const { searchParams } = new URL(request.url)\r\n  const transcriptionId = searchParams.get('id')\r\n  \r\n  if (!transcriptionId) {\r\n    return new Response('Transcription ID required', { status: 400 })\r\n  }\r\n  \r\n  // Create a readable stream for SSE\r\n  const encoder = new TextEncoder()\r\n  const stream = new ReadableStream({\r\n    async start(controller) {\r\n      // Send initial connection message\r\n      controller.enqueue(encoder.encode(`data: ${JSON.stringify({ type: 'connected' })}\\n\\n`))\r\n      \r\n      let retryCount = 0\r\n      const maxRetries = 120 // 2 minutes with 1 second intervals\r\n      \r\n      // Set up interval to check for updates\r\n      const interval = setInterval(async () => {\r\n        try {\r\n          const { data, error } = await supabase\r\n            .from('transcriptions')\r\n            .select('*')\r\n            .eq('id', transcriptionId)\r\n            .single()\r\n          \r\n          if (error) {\r\n            controller.enqueue(encoder.encode(`data: ${JSON.stringify({ \r\n              type: 'error', \r\n              error: 'Failed to fetch transcription' \r\n            })}\\n\\n`))\r\n            clearInterval(interval)\r\n            controller.close()\r\n            return\r\n          }\r\n          \r\n          if (data) {\r\n            // Send status update\r\n            controller.enqueue(encoder.encode(`data: ${JSON.stringify({\r\n              type: 'status',\r\n              data: {\r\n                id: data.id,\r\n                status: data.status,\r\n                transcription_text: data.transcription_text,\r\n                audio_url: data.audio_url,\r\n                error: data.error\r\n              }\r\n            })}\\n\\n`))\r\n            \r\n            // If completed or failed, close the stream\r\n            if (data.status === 'completed' || data.status === 'failed') {\r\n              controller.enqueue(encoder.encode(`data: ${JSON.stringify({ \r\n                type: 'complete',\r\n                status: data.status \r\n              })}\\n\\n`))\r\n              clearInterval(interval)\r\n              controller.close()\r\n              return\r\n            }\r\n          }\r\n          \r\n          retryCount++\r\n          if (retryCount >= maxRetries) {\r\n            controller.enqueue(encoder.encode(`data: ${JSON.stringify({ \r\n              type: 'timeout',\r\n              message: 'Status check timeout' \r\n            })}\\n\\n`))\r\n            clearInterval(interval)\r\n            controller.close()\r\n          }\r\n        } catch (error) {\r\n          console.error('SSE error:', error)\r\n          controller.enqueue(encoder.encode(`data: ${JSON.stringify({ \r\n            type: 'error',\r\n            error: 'Internal error' \r\n          })}\\n\\n`))\r\n          clearInterval(interval)\r\n          controller.close()\r\n        }\r\n      }, 1000) // Check every second\r\n      \r\n      // Clean up on client disconnect\r\n      request.signal.addEventListener('abort', () => {\r\n        clearInterval(interval)\r\n        controller.close()\r\n      })\r\n    }\r\n  })\r\n  \r\n  // Return SSE response\r\n  return new Response(stream, {\r\n    headers: {\r\n      'Content-Type': 'text/event-stream',\r\n      'Cache-Control': 'no-cache',\r\n      'Connection': 'keep-alive',\r\n      'X-Accel-Buffering': 'no' // Disable Nginx buffering\r\n    }\r\n  })\r\n}\r\n"],"names":[],"mappings":";;;;;AACA;;AAEO,MAAM,UAAU;AAChB,MAAM,UAAU;AAEhB,eAAe,IAAI,OAAoB;IAC5C,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,kBAAkB,aAAa,GAAG,CAAC;IAEzC,IAAI,CAAC,iBAAiB;QACpB,OAAO,IAAI,SAAS,6BAA6B;YAAE,QAAQ;QAAI;IACjE;IAEA,mCAAmC;IACnC,MAAM,UAAU,IAAI;IACpB,MAAM,SAAS,IAAI,eAAe;QAChC,MAAM,OAAM,UAAU;YACpB,kCAAkC;YAClC,WAAW,OAAO,CAAC,QAAQ,MAAM,CAAC,CAAC,MAAM,EAAE,KAAK,SAAS,CAAC;gBAAE,MAAM;YAAY,GAAG,IAAI,CAAC;YAEtF,IAAI,aAAa;YACjB,MAAM,aAAa,IAAI,oCAAoC;;YAE3D,uCAAuC;YACvC,MAAM,WAAW,YAAY;gBAC3B,IAAI;oBACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,wHAAA,CAAA,WAAQ,CACnC,IAAI,CAAC,kBACL,MAAM,CAAC,KACP,EAAE,CAAC,MAAM,iBACT,MAAM;oBAET,IAAI,OAAO;wBACT,WAAW,OAAO,CAAC,QAAQ,MAAM,CAAC,CAAC,MAAM,EAAE,KAAK,SAAS,CAAC;4BACxD,MAAM;4BACN,OAAO;wBACT,GAAG,IAAI,CAAC;wBACR,cAAc;wBACd,WAAW,KAAK;wBAChB;oBACF;oBAEA,IAAI,MAAM;wBACR,qBAAqB;wBACrB,WAAW,OAAO,CAAC,QAAQ,MAAM,CAAC,CAAC,MAAM,EAAE,KAAK,SAAS,CAAC;4BACxD,MAAM;4BACN,MAAM;gCACJ,IAAI,KAAK,EAAE;gCACX,QAAQ,KAAK,MAAM;gCACnB,oBAAoB,KAAK,kBAAkB;gCAC3C,WAAW,KAAK,SAAS;gCACzB,OAAO,KAAK,KAAK;4BACnB;wBACF,GAAG,IAAI,CAAC;wBAER,2CAA2C;wBAC3C,IAAI,KAAK,MAAM,KAAK,eAAe,KAAK,MAAM,KAAK,UAAU;4BAC3D,WAAW,OAAO,CAAC,QAAQ,MAAM,CAAC,CAAC,MAAM,EAAE,KAAK,SAAS,CAAC;gCACxD,MAAM;gCACN,QAAQ,KAAK,MAAM;4BACrB,GAAG,IAAI,CAAC;4BACR,cAAc;4BACd,WAAW,KAAK;4BAChB;wBACF;oBACF;oBAEA;oBACA,IAAI,cAAc,YAAY;wBAC5B,WAAW,OAAO,CAAC,QAAQ,MAAM,CAAC,CAAC,MAAM,EAAE,KAAK,SAAS,CAAC;4BACxD,MAAM;4BACN,SAAS;wBACX,GAAG,IAAI,CAAC;wBACR,cAAc;wBACd,WAAW,KAAK;oBAClB;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,cAAc;oBAC5B,WAAW,OAAO,CAAC,QAAQ,MAAM,CAAC,CAAC,MAAM,EAAE,KAAK,SAAS,CAAC;wBACxD,MAAM;wBACN,OAAO;oBACT,GAAG,IAAI,CAAC;oBACR,cAAc;oBACd,WAAW,KAAK;gBAClB;YACF,GAAG,MAAM,qBAAqB;;YAE9B,gCAAgC;YAChC,QAAQ,MAAM,CAAC,gBAAgB,CAAC,SAAS;gBACvC,cAAc;gBACd,WAAW,KAAK;YAClB;QACF;IACF;IAEA,sBAAsB;IACtB,OAAO,IAAI,SAAS,QAAQ;QAC1B,SAAS;YACP,gBAAgB;YAChB,iBAAiB;YACjB,cAAc;YACd,qBAAqB,KAAK,0BAA0B;QACtD;IACF;AACF","debugId":null}}]
}