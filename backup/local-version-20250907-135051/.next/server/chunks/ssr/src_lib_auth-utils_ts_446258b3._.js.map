{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Omar/Desktop/AI%20website%20Latest/dashboard-next/src/lib/auth-utils.ts"],"sourcesContent":["import { supabase } from './supabase';\n\nclass AuthManager {\n  private tokenPromise: Promise<string | null> | null = null;\n  private cachedToken: string | null = null;\n  private tokenExpiry: number = 0;\n\n  private initialized = false;\n\n  constructor() {\n    console.log('AuthManager: Constructor called');\n    this.initialize();\n  }\n\n  private async initialize() {\n    console.log('üîß AuthManager: Initializing...');\n    try {\n      // Try to get session immediately on construction\n      const { data: { session }, error } = await supabase.auth.getSession();\n\n      if (error) {\n        console.log('‚ö†Ô∏è AuthManager: Session error during initialization:', error.message);\n        this.initialized = true;\n        return;\n      }\n\n      if (session?.access_token) {\n        this.cachedToken = session.access_token;\n        this.tokenExpiry = Date.now() + (10 * 60 * 1000);\n        console.log('‚úÖ AuthManager: Initialized with existing session');\n      } else {\n        console.log('‚ö†Ô∏è AuthManager: No existing session found during initialization');\n      }\n\n      this.initialized = true;\n      console.log('‚úÖ AuthManager: Initialization complete');\n    } catch (error) {\n      console.error('‚ùå AuthManager: Initialization failed:', error);\n      // Don't fail initialization - just mark as complete so other methods can work\n      this.initialized = true;\n      this.cachedToken = null;\n      this.tokenExpiry = 0;\n    }\n  }\n\n  private async waitForInitialization() {\n    if (!this.initialized) {\n      console.log('‚è≥ AuthManager: Waiting for initialization...');\n      // Simple polling since we can't use await in constructor\n      while (!this.initialized) {\n        await new Promise(resolve => setTimeout(resolve, 50));\n      }\n      console.log('‚úÖ AuthManager: Initialization wait complete');\n    }\n  }\n\n  async getAuthToken(): Promise<string | null> {\n    console.log('üöÄ AuthManager: getAuthToken called');\n\n    // Wait for initialization to complete\n    await this.waitForInitialization();\n\n    // If we have a valid cached token, return it immediately\n    if (this.cachedToken && Date.now() < this.tokenExpiry) {\n      console.log('‚úÖ AuthManager: Returning cached token, expiry:', new Date(this.tokenExpiry).toISOString());\n      return this.cachedToken;\n    }\n\n    // If we're already fetching a token, wait for it\n    if (this.tokenPromise) {\n      console.log('‚è≥ AuthManager: Waiting for existing token promise');\n      return this.tokenPromise;\n    }\n\n    console.log('üîÑ AuthManager: Starting new token fetch');\n    // Start fetching a new token\n    this.tokenPromise = this.fetchAuthToken();\n\n    // Don't clear the promise immediately - let all waiting requests get the result\n    let token = await this.tokenPromise;\n\n    // If first attempt failed, try one more time after a short delay\n    if (!token) {\n      console.log('üîÑ AuthManager: First attempt failed, retrying...');\n      await new Promise(resolve => setTimeout(resolve, 500)); // Wait 500ms\n\n      this.tokenPromise = this.fetchAuthToken();\n      token = await this.tokenPromise;\n      console.log('üîÑ AuthManager: Retry result:', !!token);\n    }\n\n    // Clear the promise after a short delay to allow all concurrent requests to complete\n    setTimeout(() => {\n      console.log('üßπ AuthManager: Clearing token promise');\n      this.tokenPromise = null;\n    }, 100);\n\n    console.log('üèÅ AuthManager: Token fetch completed, hasToken:', !!token);\n    return token;\n  }\n\n  // Enhanced session refresh method\n  async refreshSession(): Promise<string | null> {\n    console.log('üîÑ AuthManager: Forcing session refresh');\n\n    try {\n      // Clear any existing cached data\n      this.clearCache();\n\n      // Try to refresh the session\n      const { data, error } = await supabase.auth.refreshSession();\n\n      if (error) {\n        console.error('‚ùå AuthManager: Session refresh failed:', error);\n\n        // If refresh fails due to invalid refresh token, try to get a new session\n        if (error.message.includes('refresh_token_not_found') ||\n            error.message.includes('Invalid Refresh Token')) {\n          console.log('üîÑ AuthManager: Refresh token invalid, attempting re-authentication');\n\n          // Try to get a new session by calling getSession\n          const { data: sessionData, error: sessionError } = await supabase.auth.getSession();\n\n          if (sessionError) {\n            console.error('‚ùå AuthManager: Failed to get new session:', sessionError);\n            return null;\n          }\n\n          if (sessionData?.session?.access_token) {\n            this.cachedToken = sessionData.session.access_token;\n            this.tokenExpiry = Date.now() + (10 * 60 * 1000);\n            console.log('‚úÖ AuthManager: Got new session after refresh token failure');\n            return sessionData.session.access_token;\n          }\n        }\n\n        return null;\n      }\n\n      if (data.session?.access_token) {\n        this.cachedToken = data.session.access_token;\n        this.tokenExpiry = Date.now() + (10 * 60 * 1000);\n        console.log('‚úÖ AuthManager: Session refreshed successfully');\n        return data.session.access_token;\n      }\n\n      return null;\n    } catch (error) {\n      console.error('‚ùå AuthManager: Error during session refresh:', error);\n      return null;\n    }\n  }\n\n  private async fetchAuthToken(): Promise<string | null> {\n    try {\n      console.log('üîç AuthManager: Attempting to get session from Supabase...');\n\n      // First, try to get the current session\n      const { data: { session }, error } = await supabase.auth.getSession();\n\n      console.log('üîç AuthManager: Session retrieval result:', {\n        hasError: !!error,\n        errorMessage: error?.message,\n        hasSession: !!session,\n        sessionUserId: session?.user?.id,\n        hasAccessToken: !!session?.access_token,\n        accessTokenLength: session?.access_token?.length,\n        sessionExpiry: session?.expires_at ? new Date(session.expires_at * 1000).toISOString() : 'N/A'\n      });\n\n      if (error) {\n        console.error('‚ùå AuthManager: Error getting session:', error);\n        return null;\n      }\n\n      if (session?.access_token) {\n        // Cache the token for 10 minutes (increased from 5)\n        this.cachedToken = session.access_token;\n        this.tokenExpiry = Date.now() + (10 * 60 * 1000);\n        console.log('‚úÖ AuthManager: Token cached successfully, tokenLength:', session.access_token.length, 'expiry:', new Date(this.tokenExpiry).toISOString());\n        return session.access_token;\n      }\n\n      console.log('‚ö†Ô∏è AuthManager: No access token found in session - trying alternative approaches');\n\n      // If no session, try to get the current user to see if we're logged in\n      console.log('üîç AuthManager: Checking current user...');\n      const { data: { user }, error: userError } = await supabase.auth.getUser();\n\n      console.log('üîç AuthManager: Current user check:', {\n        hasUser: !!user,\n        userId: user?.id,\n        hasUserError: !!userError,\n        userErrorMessage: userError?.message\n      });\n\n      if (userError) {\n        console.error('‚ùå AuthManager: Error getting user:', userError);\n        return null;\n      }\n\n      if (user) {\n        console.log('‚úÖ AuthManager: User is logged in but no session found, trying to refresh...');\n\n        // Try to refresh the session\n        const { data, error: refreshError } = await supabase.auth.refreshSession();\n\n        console.log('üîÑ AuthManager: Session refresh result:', {\n          hasRefreshError: !!refreshError,\n          refreshErrorMessage: refreshError?.message,\n          hasRefreshedSession: !!data.session,\n          hasRefreshedToken: !!data.session?.access_token\n        });\n\n        if (data.session?.access_token) {\n          this.cachedToken = data.session.access_token;\n          this.tokenExpiry = Date.now() + (10 * 60 * 1000);\n          console.log('‚úÖ AuthManager: Token refreshed and cached successfully');\n          return data.session.access_token;\n        }\n      }\n\n      // Last resort: try to read from localStorage directly\n      console.log('üîç AuthManager: Trying to read from localStorage directly...');\n      try {\n        const keys = Object.keys(localStorage);\n        const authKey = keys.find(key => key.includes('supabase') && key.includes('auth'));\n        if (authKey) {\n          const authData = localStorage.getItem(authKey);\n          if (authData) {\n            const parsed = JSON.parse(authData);\n            if (parsed?.currentSession?.access_token) {\n              console.log('‚úÖ AuthManager: Found token in localStorage!');\n              this.cachedToken = parsed.currentSession.access_token;\n              this.tokenExpiry = Date.now() + (10 * 60 * 1000);\n              return parsed.currentSession.access_token;\n            }\n          }\n        }\n      } catch (storageError) {\n        console.log('üîç AuthManager: Could not read from localStorage:', storageError);\n      }\n\n      console.log('‚ùå AuthManager: Unable to retrieve auth token from any source');\n      return null;\n    } catch (error) {\n      console.error('‚ùå AuthManager: Error fetching auth token:', error);\n      return null;\n    }\n  }\n\n  clearCache() {\n    console.log('AuthManager: Clearing cache');\n    this.cachedToken = null;\n    this.tokenExpiry = 0;\n    this.tokenPromise = null;\n  }\n\n  // Method to handle authentication errors\n  async handleAuthError(): Promise<string | null> {\n    console.log('Authentication error detected, attempting recovery');\n\n    // First try to refresh the session\n    const token = await this.refreshSession();\n\n    if (token) {\n      console.log('‚úÖ AuthManager: Recovered from authentication error');\n      return token;\n    }\n\n    // If refresh fails, clear cache and force re-authentication\n    console.log('‚ùå AuthManager: Could not recover from authentication error, clearing cache');\n    this.clearCache();\n    return null;\n  }\n\n  // Check if we have a valid cached token without triggering a fetch\n  hasValidToken(): boolean {\n    const now = Date.now();\n    const hasValid = !!(this.cachedToken && now < this.tokenExpiry);\n    console.log('AuthManager: hasValidToken check - hasToken:', !!this.cachedToken, 'tokenLength:', this.cachedToken?.length, 'expiry:', new Date(this.tokenExpiry).toISOString(), 'now:', new Date(now).toISOString(), 'isExpired:', now >= this.tokenExpiry, 'result:', hasValid);\n    return hasValid;\n  }\n\n  // Force refresh the session\n  async forceRefreshSession(): Promise<string | null> {\n    console.log('AuthManager: Force refreshing session');\n    this.clearCache();\n    return await this.getAuthToken();\n  }\n\n  // Check if user is currently logged in\n  async isLoggedIn(): Promise<boolean> {\n    // Wait for initialization to complete\n    await this.waitForInitialization();\n\n    try {\n      console.log('üîê AuthManager: Checking if user is logged in...');\n      const { data: { user }, error } = await supabase.auth.getUser();\n      const isLoggedIn = !error && !!user;\n      console.log('üîê AuthManager: isLoggedIn check - hasUser:', !!user, 'userId:', user?.id, 'hasError:', !!error, 'errorMessage:', error?.message, 'result:', isLoggedIn);\n      return isLoggedIn;\n    } catch (error) {\n      console.error('‚ùå AuthManager: Error checking login status:', error);\n      return false;\n    }\n  }\n}\n\n// Debug function to test authentication\nexport const debugAuth = async () => {\n  console.log('üîß DEBUG: Starting comprehensive auth debug...');\n\n  try {\n    // Test 1: Check Supabase client\n    console.log('üîß DEBUG: Testing Supabase client...');\n    if (!supabase) {\n      console.error('‚ùå DEBUG: Supabase client is null/undefined');\n      return { error: 'No Supabase client' };\n    }\n    console.log('‚úÖ DEBUG: Supabase client exists');\n\n    // Test 2: Check current session\n    console.log('üîß DEBUG: Testing current session...');\n    const { data: sessionData, error: sessionError } = await supabase.auth.getSession();\n    console.log('üîß DEBUG: Session data:', {\n      hasSession: !!sessionData?.session,\n      hasAccessToken: !!sessionData?.session?.access_token,\n      sessionError: sessionError?.message,\n      sessionExpiry: sessionData?.session?.expires_at ? new Date(sessionData.session.expires_at * 1000).toISOString() : 'N/A',\n      sessionUserId: sessionData?.session?.user?.id\n    });\n\n    // Test 3: Check current user\n    console.log('üîß DEBUG: Testing current user...');\n    const { data: userData, error: userError } = await supabase.auth.getUser();\n    console.log('üîß DEBUG: User data:', {\n      hasUser: !!userData?.user,\n      userId: userData?.user?.id,\n      userError: userError?.message\n    });\n\n    // Test 4: Test AuthManager directly\n    console.log('üîß DEBUG: Testing AuthManager...');\n    const authManager = new AuthManager();\n    const token = await authManager.getAuthToken();\n    console.log('üîß DEBUG: AuthManager token result:', {\n      hasToken: !!token,\n      tokenLength: token?.length,\n      tokenStart: token?.substring(0, 20) + '...'\n    });\n\n    // Test 5: Check browser storage\n    console.log('üîß DEBUG: Checking browser storage...');\n    try {\n      const localStorageKeys = Object.keys(localStorage).filter(key => key.includes('supabase'));\n      console.log('üîß DEBUG: Supabase localStorage keys:', localStorageKeys);\n\n      // Try to read actual Supabase auth data\n      const authKey = localStorageKeys.find(key => key.includes('auth'));\n      if (authKey) {\n        const authData = localStorage.getItem(authKey);\n        console.log('üîß DEBUG: Auth data exists in localStorage:', !!authData);\n        if (authData) {\n          const parsed = JSON.parse(authData);\n          console.log('üîß DEBUG: Parsed auth data:', {\n            hasCurrentSession: !!parsed?.currentSession,\n            hasAccessToken: !!parsed?.currentSession?.access_token,\n            sessionExpiry: parsed?.currentSession?.expires_at ? new Date(parsed.currentSession.expires_at * 1000).toISOString() : 'N/A'\n          });\n        }\n      }\n\n      const sessionStorageKeys = Object.keys(sessionStorage).filter(key => key.includes('supabase'));\n      console.log('üîß DEBUG: Supabase sessionStorage keys:', sessionStorageKeys);\n    } catch (e) {\n      console.log('üîß DEBUG: Could not access browser storage:', e);\n    }\n\n    const result = {\n      supabaseOk: !!supabase,\n      sessionOk: !!sessionData?.session,\n      userOk: !!userData?.user,\n      tokenOk: !!token,\n      sessionData,\n      userData,\n      hasToken: !!token\n    };\n\n    console.log('üîß DEBUG: Final result:', result);\n    return result;\n\n  } catch (error) {\n    console.error('‚ùå DEBUG: Auth debug failed:', error);\n    return { error: error.message };\n  }\n};\n\n// Create the singleton instance\nexport const authManager = new AuthManager();\n\n// Debug function to test authentication fixes\nexport const testAuthFixes = async () => {\n  console.log('üîß Testing authentication fixes...');\n\n  try {\n    // Test 1: Check if auth manager can get token\n    console.log('üîß Test 1: Getting auth token...');\n    const token = await authManager.getAuthToken();\n    console.log('üîß Test 1 Result:', { hasToken: !!token, tokenLength: token?.length });\n\n    // Test 2: Check session refresh\n    console.log('üîß Test 2: Testing session refresh...');\n    const refreshToken = await authManager.refreshSession();\n    console.log('üîß Test 2 Result:', { hasRefreshToken: !!refreshToken, tokenLength: refreshToken?.length });\n\n    // Test 3: Test error handling\n    console.log('üîß Test 3: Testing error handling...');\n    const errorResult = await authManager.handleAuthError();\n    console.log('üîß Test 3 Result:', { recovered: !!errorResult, tokenLength: errorResult?.length });\n\n    console.log('‚úÖ Authentication fixes test completed');\n    return { success: true, token, refreshToken, errorResult };\n\n  } catch (error) {\n    console.error('‚ùå Authentication fixes test failed:', error);\n    return { success: false, error: error.message };\n  }\n};\n"],"names":[],"mappings":"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","debugId":null}}]
}