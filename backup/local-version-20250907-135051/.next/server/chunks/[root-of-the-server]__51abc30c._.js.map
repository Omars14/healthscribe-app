{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Omar/Desktop/AI%20website%20Latest/dashboard-next/src/lib/supabase-server.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\r\n\r\n// Server-side Supabase client using service role key\r\n// This bypasses RLS policies and should only be used in server-side code\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || process.env.SUPABASE_URL || ''\r\nconst supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY || ''\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || ''\r\n\r\n// During build time, environment variables might not be available\r\n// We'll create a dummy client that will be replaced at runtime\r\nconst isDevelopmentOrBuild = process.env.NODE_ENV === 'development' || !supabaseUrl\r\n\r\nif (!supabaseUrl && process.env.NODE_ENV === 'production') {\r\n  console.error('‚ö†Ô∏è Missing SUPABASE_URL environment variable in production')\r\n}\r\n\r\nif (!supabaseServiceRoleKey && process.env.NODE_ENV === 'production') {\r\n  console.warn('‚ö†Ô∏è Missing SUPABASE_SERVICE_ROLE_KEY - falling back to anon key')\r\n  console.warn('This may cause RLS policy errors when inserting records')\r\n}\r\n\r\n// Create server client with service role key (bypasses RLS)\r\nexport const supabaseServer = supabaseUrl ? createClient(\r\n  supabaseUrl,\r\n  supabaseServiceRoleKey || supabaseAnonKey,\r\n  {\r\n    auth: {\r\n      autoRefreshToken: false,\r\n      persistSession: false\r\n    }\r\n  }\r\n) : null as any\r\n\r\n// Helper to create a client with user context (respects RLS)\r\nexport const createServerClient = (accessToken?: string) => {\r\n  if (!supabaseUrl || !supabaseAnonKey) {\r\n    return null as any\r\n  }\r\n  return createClient(\r\n    supabaseUrl,\r\n    supabaseAnonKey,\r\n    {\r\n      auth: {\r\n        autoRefreshToken: false,\r\n        persistSession: false\r\n      },\r\n      global: {\r\n        headers: accessToken ? {\r\n          Authorization: `Bearer ${accessToken}`\r\n        } : {}\r\n      }\r\n    }\r\n  )\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,qDAAqD;AACrD,yEAAyE;AACzE,MAAM,cAAc,gFAAwC,QAAQ,GAAG,CAAC,YAAY,IAAI;AACxF,MAAM,yBAAyB,QAAQ,GAAG,CAAC,yBAAyB,IAAI;AACxE,MAAM,kBAAkB,wPAA6C;AAErE,kEAAkE;AAClE,+DAA+D;AAC/D,MAAM,uBAAuB,oDAAyB,iBAAiB,CAAC;AAExE;;AAIA;;AAMO,MAAM,iBAAiB,uCAAc,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EACrD,aACA,0BAA0B,iBAC1B;IACE,MAAM;QACJ,kBAAkB;QAClB,gBAAgB;IAClB;AACF,KACE;AAGG,MAAM,qBAAqB,CAAC;IACjC;;IAGA,OAAO,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAChB,aACA,iBACA;QACE,MAAM;YACJ,kBAAkB;YAClB,gBAAgB;QAClB;QACA,QAAQ;YACN,SAAS,cAAc;gBACrB,eAAe,CAAC,OAAO,EAAE,aAAa;YACxC,IAAI,CAAC;QACP;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Omar/Desktop/AI%20website%20Latest/dashboard-next/src/app/api/transcribe-optimized/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\r\nimport { supabaseServer, createServerClient } from '@/lib/supabase-server'\r\nimport { cookies } from 'next/headers'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\n// Configure runtime for large file uploads\r\nexport const runtime = 'nodejs'\r\nexport const maxDuration = 60 // 60 seconds timeout\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Check Content-Type to handle both JSON and FormData\r\n    const contentType = request.headers.get('content-type')\r\n    const isJson = contentType?.includes('application/json')\r\n    \r\n    // Get authorization header if present\r\n    const authHeader = request.headers.get('authorization')\r\n    let userId = null\r\n    \r\n    if (authHeader && authHeader.startsWith('Bearer ')) {\r\n      const token = authHeader.substring(7)\r\n      \r\n      // Verify the token and get user using server client\r\n      const { data: { user }, error } = await supabaseServer.auth.getUser(token)\r\n      \r\n      if (user && !error) {\r\n        userId = user.id\r\n        console.log('Authenticated user for upload:', user.email, 'ID:', userId)\r\n      } else {\r\n        console.log('Auth error:', error?.message)\r\n      }\r\n    } else {\r\n      console.log('No auth header provided, creating transcription without user_id')\r\n    }\r\n    \r\n    let audioUrl: string\r\n    let fileName: string\r\n    let fileSize: number\r\n    let fileType: string\r\n    let doctorName: string\r\n    let patientName: string\r\n    let documentType: string\r\n    \r\n    if (isJson) {\r\n      // Handle JSON payload (file already uploaded to storage)\r\n      const data = await request.json()\r\n      audioUrl = data.audioUrl\r\n      fileName = data.fileName\r\n      fileSize = data.fileSize\r\n      fileType = data.fileType || 'audio/mpeg'\r\n      doctorName = data.doctorName\r\n      patientName = data.patientName\r\n      documentType = data.documentType\r\n      \r\n      if (!audioUrl) {\r\n        return NextResponse.json({ error: 'No audio URL provided' }, { status: 400 })\r\n      }\r\n      \r\n      console.log('Received pre-uploaded file:', { fileName, fileSize, audioUrl })\r\n    } else {\r\n      // Handle FormData (legacy support for small files)\r\n      const formData = await request.formData()\r\n      const audioFile = formData.get('audio') as File\r\n      doctorName = formData.get('doctorName') as string\r\n      patientName = formData.get('patientName') as string\r\n      documentType = formData.get('documentType') as string\r\n      \r\n      if (!audioFile) {\r\n        return NextResponse.json({ error: 'No audio file provided' }, { status: 400 })\r\n      }\r\n      \r\n      fileName = audioFile.name\r\n      fileSize = audioFile.size\r\n      fileType = audioFile.type\r\n      \r\n      // Upload to storage (for backward compatibility)\r\n      audioUrl = await uploadAudioToStorage(audioFile, userId)\r\n    }\r\n    \r\n    // Step 2: Create database record with audio URL\r\n    const transcription = await createTranscriptionRecord({\r\n      fileName,\r\n      doctorName,\r\n      patientName,\r\n      documentType,\r\n      fileSize,\r\n      userId,\r\n      audioUrl\r\n    })\r\n    \r\n    if (!transcription) {\r\n      return NextResponse.json({ error: 'Failed to create transcription record' }, { status: 500 })\r\n    }\r\n    \r\n    // Step 3: Send to n8n - IMPORTANT: We need to await briefly to ensure it starts\r\n    console.log('üéØ About to call sendToN8NAsync for transcription:', transcription.id)\r\n    console.log('üìä Audio URL being sent to n8n:', audioUrl)\r\n    console.log('üìä Metadata:', { doctorName, patientName, documentType })\r\n    \r\n    // Start the n8n webhook call but use Promise.race to return quickly\r\n    // This ensures the function starts but we don't wait for it to complete\r\n    const n8nPromise = sendToN8NAsync(transcription.id, {\r\n      fileName,\r\n      fileSize,\r\n      fileType\r\n    }, {\r\n      doctorName,\r\n      patientName,\r\n      documentType\r\n    }, audioUrl).then(() => {\r\n      console.log('‚úÖ N8N webhook call completed successfully')\r\n    }).catch(error => {\r\n      console.error('‚ùå Background n8n processing error:', error)\r\n      console.error('Error stack:', error.stack)\r\n      console.error('Error details:', {\r\n        message: error.message,\r\n        name: error.name,\r\n        cause: error.cause\r\n      })\r\n      // Update status to indicate n8n processing failed\r\n      return supabaseServer\r\n        .from('transcriptions')\r\n        .update({ status: 'failed', error: error.message })\r\n        .eq('id', transcription.id)\r\n        .then(() => {\r\n          console.log('Updated transcription status to failed')\r\n        })\r\n    })\r\n    \r\n    // Wait for either the n8n call to start (500ms) or complete, whichever comes first\r\n    // This ensures Vercel doesn't kill the function before the HTTP request is sent\r\n    // Increased timeout to ensure the request is actually sent on Vercel\r\n    await Promise.race([\r\n      n8nPromise,\r\n      new Promise(resolve => setTimeout(resolve, 500))\r\n    ])\r\n    \r\n    // Return immediately with transcription ID\r\n    return NextResponse.json({\r\n      success: true,\r\n      transcriptionId: transcription.id,\r\n      status: 'processing',\r\n      message: 'File uploaded successfully. Transcription in progress.'\r\n    })\r\n    \r\n  } catch (error) {\r\n    console.error('Transcription API error:', error)\r\n    return NextResponse.json(\r\n      { error: 'Internal server error', details: error instanceof Error ? error.message : 'Unknown error' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n\r\nasync function uploadAudioToStorage(file: File, userId: string | null): Promise<string> {\r\n  try {\r\n    // Generate unique file name\r\n    const timestamp = Date.now()\r\n    const fileExt = file.name.split('.').pop() || 'mp3'\r\n    const fileName = `${timestamp}-${uuidv4()}.${fileExt}`\r\n    const filePath = userId ? `${userId}/${fileName}` : `anonymous/${fileName}`\r\n    \r\n    console.log('üì§ Uploading audio to Supabase Storage:', filePath)\r\n    \r\n    // Convert file to buffer\r\n    const arrayBuffer = await file.arrayBuffer()\r\n    const buffer = Buffer.from(arrayBuffer)\r\n    \r\n    // Upload to Supabase Storage\r\n    const { data, error } = await supabaseServer.storage\r\n      .from('audio-files')\r\n      .upload(filePath, buffer, {\r\n        contentType: file.type || 'audio/mpeg',\r\n        upsert: false\r\n      })\r\n    \r\n    if (error) {\r\n      console.error('‚ùå Storage upload error:', error)\r\n      // Try to create bucket if it doesn't exist\r\n      if (error.message?.includes('bucket') || error.message?.includes('not found')) {\r\n        console.log('ü™£ Creating audio-files bucket...')\r\n        const { error: bucketError } = await supabaseServer.storage\r\n          .createBucket('audio-files', {\r\n            public: false,\r\n            allowedMimeTypes: ['audio/*'],\r\n            fileSizeLimit: 52428800 // 50MB\r\n          })\r\n        \r\n        if (!bucketError || bucketError.message?.includes('already exists')) {\r\n          // Retry upload\r\n          const retryResult = await supabaseServer.storage\r\n            .from('audio-files')\r\n            .upload(filePath, buffer, {\r\n              contentType: file.type || 'audio/mpeg',\r\n              upsert: false\r\n            })\r\n          \r\n          if (retryResult.error) {\r\n            throw retryResult.error\r\n          }\r\n        } else {\r\n          throw bucketError\r\n        }\r\n      } else {\r\n        throw error\r\n      }\r\n    }\r\n    \r\n    // Get public URL for the uploaded file\r\n    const { data: { publicUrl } } = supabaseServer.storage\r\n      .from('audio-files')\r\n      .getPublicUrl(filePath)\r\n    \r\n    console.log('‚úÖ Audio uploaded successfully:', publicUrl)\r\n    return publicUrl\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Failed to upload audio to storage:', error)\r\n    // Return empty string if upload fails - transcription can still proceed\r\n    return ''\r\n  }\r\n}\r\n\r\nasync function createTranscriptionRecord(data: {\r\n  fileName: string\r\n  doctorName: string\r\n  patientName: string\r\n  documentType: string\r\n  fileSize: number\r\n  userId?: string | null\r\n  audioUrl?: string\r\n}) {\r\n  try {\r\n    console.log('Creating transcription record with data:', {\r\n      ...data,\r\n      userId: data.userId ? `${data.userId.substring(0, 8)}...` : 'null'\r\n    })\r\n    \r\n    // First, let's check if the table exists and what columns it has\r\n    const { data: tableCheck, error: tableError } = await supabaseServer\r\n      .from('transcriptions')\r\n      .select('*')\r\n      .limit(1)\r\n    \r\n    if (tableError && tableError.code === '42P01') {\r\n      console.error('‚ùå CRITICAL: transcriptions table does not exist!')\r\n      console.error('Please run the SQL schema from src/lib/create-new-database.sql')\r\n      return null\r\n    }\r\n    \r\n    // Try to insert with status column, fallback to without if it fails\r\n    let transcription = null\r\n    let error = null\r\n    \r\n    try {\r\n      const insertData = {\r\n        file_name: data.fileName,\r\n        doctor_name: data.doctorName,\r\n        patient_name: data.patientName,\r\n        document_type: data.documentType,\r\n        status: 'pending',\r\n        file_size: data.fileSize,\r\n        transcription_text: '',\r\n        audio_url: data.audioUrl || '',\r\n        user_id: data.userId || null,\r\n        created_at: new Date().toISOString()\r\n      }\r\n      \r\n      console.log('Attempting insert with data:', insertData)\r\n      \r\n      const result = await supabaseServer\r\n        .from('transcriptions')\r\n        .insert(insertData)\r\n        .select()\r\n        .single()\r\n      \r\n      transcription = result.data\r\n      error = result.error\r\n      \r\n      if (error) {\r\n        console.log('First insert attempt failed, trying fallback...')\r\n      }\r\n    } catch (e) {\r\n      console.log('Exception in first insert:', e)\r\n      // If status column doesn't exist, try without it\r\n      const fallbackData = {\r\n        file_name: data.fileName,\r\n        doctor_name: data.doctorName,\r\n        patient_name: data.patientName,\r\n        document_type: data.documentType,\r\n        transcription_text: '',\r\n        audio_url: data.audioUrl || '',\r\n        user_id: data.userId || null,\r\n        created_at: new Date().toISOString()\r\n      }\r\n      \r\n      console.log('Attempting fallback insert without status column:', fallbackData)\r\n      \r\n      const fallbackResult = await supabaseServer\r\n        .from('transcriptions')\r\n        .insert(fallbackData)\r\n        .select()\r\n        .single()\r\n      \r\n      transcription = fallbackResult.data\r\n      error = fallbackResult.error\r\n    }\r\n    \r\n    if (error) {\r\n      console.error('‚ùå Database error details:', {\r\n        message: error.message,\r\n        code: error.code,\r\n        details: error.details,\r\n        hint: error.hint,\r\n        data: data\r\n      })\r\n      \r\n      // Check if it's an RLS policy issue\r\n      if (error.code === '42501') {\r\n        console.error('‚ùå RLS Policy Error: The user does not have permission to insert.')\r\n        console.error('Possible solutions:')\r\n        console.error('1. Check if user is authenticated')\r\n        console.error('2. Check RLS policies on transcriptions table')\r\n        console.error('3. Temporarily disable RLS for testing')\r\n      }\r\n      \r\n      return null\r\n    }\r\n    \r\n    console.log('‚úÖ Transcription record created successfully:', transcription?.id)\r\n    return transcription\r\n  } catch (error) {\r\n    console.error('‚ùå Failed to create transcription record:', error)\r\n    return null\r\n  }\r\n}\r\n\r\n// Removed processAudioFile function - no longer needed since we upload to storage\r\n\r\nasync function sendToN8NAsync(\r\n  transcriptionId: string,\r\n  fileInfo: {\r\n    fileName: string\r\n    fileSize: number\r\n    fileType: string\r\n  },\r\n  metadata: { doctorName: string; patientName: string; documentType: string },\r\n  audioUrl: string\r\n) {\r\n  try {\r\n    console.log('üîî Starting n8n webhook call for transcription:', transcriptionId)\r\n    console.log('üîî Function parameters:', {\r\n      transcriptionId,\r\n      fileInfo,\r\n      metadata,\r\n      audioUrl: audioUrl ? 'URL provided' : 'NO URL!'\r\n    })\r\n    \r\n    // Try to update status if column exists\r\n    try {\r\n      await supabaseServer\r\n        .from('transcriptions')\r\n        .update({ status: 'in_progress' })\r\n        .eq('id', transcriptionId)\r\n    } catch (e) {\r\n      console.log('Status column not available, skipping status update')\r\n    }\r\n    \r\n    // Get n8n Cloud webhook URL\r\n    const N8N_WEBHOOK_URL = process.env.N8N_WEBHOOK_URL || process.env.NEXT_PUBLIC_N8N_WEBHOOK_URL || 'https://project6.app.n8n.cloud/webhook/medical-transcribe-v2'\r\n    console.log('üîó N8N webhook URL:', N8N_WEBHOOK_URL)\r\n    console.log('üîó Environment check:', {\r\n      'N8N_WEBHOOK_URL': process.env.N8N_WEBHOOK_URL ? 'SET' : 'NOT SET',\r\n      'NEXT_PUBLIC_N8N_WEBHOOK_URL': process.env.NEXT_PUBLIC_N8N_WEBHOOK_URL ? 'SET' : 'NOT SET',\r\n      'NODE_ENV': process.env.NODE_ENV,\r\n      'VERCEL': process.env.VERCEL ? 'YES' : 'NO'\r\n    })\r\n    \r\n    // Determine callback URL for production\r\n    let callbackUrl = `${process.env.NEXT_PUBLIC_SITE_URL || 'https://dashboard-next.vercel.app'}/api/transcription-result-v2`\r\n    const bypassSecret = process.env.VERCEL_AUTOMATION_BYPASS_SECRET || '4ipofkderor13UDpoR8QzvmpE2WZZC8h'\r\n    \r\n    if (process.env.VERCEL_URL) {\r\n      // Add bypass token to allow n8n to access the protected endpoint\r\n      callbackUrl = `https://${process.env.VERCEL_URL}/api/transcription-result-v2?x-vercel-protection-bypass=${bypassSecret}`\r\n    } else if (process.env.NODE_ENV === 'production' || process.env.VERCEL) {\r\n      // Use the main production URL with bypass token\r\n      callbackUrl = `https://dashboard-next.vercel.app/api/transcription-result-v2?x-vercel-protection-bypass=${bypassSecret}`\r\n    }\r\n    \r\n    // Prepare JSON payload for n8n Cloud webhook (send directly, not wrapped)\r\n    const webhookPayload = {\r\n      // Match the expected fields from the n8n workflow\r\n      uploadId: transcriptionId,\r\n      audioUrl: audioUrl,\r\n      fileName: fileInfo.fileName || 'audio.mp3',\r\n      doctorName: metadata.doctorName || '',\r\n      patientName: metadata.patientName || '',\r\n      documentType: metadata.documentType || '',\r\n      callbackUrl: callbackUrl,\r\n      \r\n      // Additional metadata\r\n      fileSize: fileInfo.fileSize,\r\n      fileType: fileInfo.fileType || 'audio/mpeg',\r\n      isLargeFile: fileInfo.fileSize > 5 * 1024 * 1024,\r\n      audioSource: 'url',\r\n      uploadTime: new Date().toISOString(),\r\n      source: 'dashboard-next'\r\n    }\r\n    \r\n    console.log('üì¶ Webhook payload prepared:', {\r\n      fileName: webhookPayload.fileName,\r\n      fileSize: webhookPayload.fileSize,\r\n      uploadId: webhookPayload.uploadId,\r\n      doctorName: webhookPayload.doctorName,\r\n      patientName: webhookPayload.patientName,\r\n      documentType: webhookPayload.documentType,\r\n      audioUrl: webhookPayload.audioUrl ? '[url]' : ''\r\n    })\r\n    \r\n    // Use AbortController for timeout\r\n    const controller = new AbortController()\r\n    const timeout = setTimeout(() => controller.abort(), 45000) // 45 second timeout (longer for large files)\r\n    \r\n    try {\r\n      console.log('üöÄ Sending POST request to n8n webhook...')\r\n      console.log('üöÄ Full URL:', N8N_WEBHOOK_URL)\r\n      console.log('üöÄ Payload size:', JSON.stringify(webhookPayload).length, 'bytes')\r\n      console.log('üöÄ Request headers:', {\r\n        'Content-Type': 'application/json',\r\n        'X-Request-ID': transcriptionId,\r\n        'X-Source': 'dashboard-next'\r\n      })\r\n      \r\n      // Send JSON payload to n8n webhook\r\n      const startTime = Date.now()\r\n      const response = await fetch(N8N_WEBHOOK_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-Request-ID': transcriptionId,\r\n          'X-Source': 'dashboard-next'\r\n        },\r\n        body: JSON.stringify(webhookPayload),\r\n        signal: controller.signal\r\n      })\r\n      const endTime = Date.now()\r\n      console.log(`üöÄ Request took ${endTime - startTime}ms`)\r\n      \r\n      clearTimeout(timeout)\r\n      \r\n      console.log('üì® N8N webhook response status:', response.status)\r\n      \r\n      // Get response text first\r\n      let responseText = ''\r\n      try {\r\n        responseText = await response.text()\r\n      } catch (e) {\r\n        console.log('Could not read response text:', e)\r\n      }\r\n      \r\n      // Handle various response scenarios\r\n      if (response.status === 200 || response.status === 201 || response.status === 202) {\r\n        console.log('‚úÖ N8N webhook accepted the request')\r\n        \r\n        // Try to parse response as JSON\r\n        let responseData = null\r\n        try {\r\n          if (responseText) {\r\n            responseData = JSON.parse(responseText)\r\n          }\r\n        } catch (e) {\r\n          // Not JSON, that's okay\r\n          console.log('Response is not JSON:', responseText.substring(0, 100))\r\n        }\r\n        \r\n        // Update status to processing\r\n        try {\r\n          const updateData: any = { status: 'processing' }\r\n          if (responseData) {\r\n            updateData.metadata = { n8nResponse: responseData }\r\n          }\r\n          \r\n          await supabaseServer\r\n            .from('transcriptions')\r\n            .update(updateData)\r\n            .eq('id', transcriptionId)\r\n        } catch (e) {\r\n          console.log('Could not update status/metadata:', e)\r\n        }\r\n        \r\n        return // Success\r\n      }\r\n      \r\n      // Handle \"No item to return\" as success (n8n async processing)\r\n      if (!response.ok && responseText && responseText.includes('No item to return')) {\r\n        console.log('‚úÖ N8N webhook accepted for async processing')\r\n        \r\n        try {\r\n          await supabaseServer\r\n            .from('transcriptions')\r\n            .update({ \r\n              status: 'processing',\r\n              metadata: { note: 'N8N async processing' }\r\n            })\r\n            .eq('id', transcriptionId)\r\n        } catch (e) {\r\n          console.log('Could not update status:', e)\r\n        }\r\n        \r\n        return // Success - async processing\r\n      }\r\n      \r\n      // Handle error responses\r\n      if (!response.ok) {\r\n        const errorMessage = `N8N webhook failed with status ${response.status}`\r\n        console.error(`‚ùå ${errorMessage}:`, responseText ? responseText.substring(0, 200) : 'No response body')\r\n        throw new Error(errorMessage)\r\n      }\r\n      \r\n    } catch (error) {\r\n      clearTimeout(timeout)\r\n      \r\n      if (error instanceof Error && error.name === 'AbortError') {\r\n        console.error('‚ùå N8N request timeout after 45 seconds')\r\n        throw new Error('N8N request timeout - the file may be too large or the service is unavailable')\r\n      }\r\n      \r\n      // Log detailed error information\r\n      console.error('‚ùå Fetch error details:', {\r\n        name: error instanceof Error ? error.name : 'Unknown',\r\n        message: error instanceof Error ? error.message : String(error),\r\n        stack: error instanceof Error ? error.stack : undefined,\r\n        cause: error instanceof Error ? (error as any).cause : undefined,\r\n        code: (error as any).code,\r\n        errno: (error as any).errno,\r\n        syscall: (error as any).syscall\r\n      })\r\n      \r\n      throw error\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå N8N webhook error:', error)\r\n    \r\n    // Try to update status to failed\r\n    try {\r\n      await supabaseServer\r\n        .from('transcriptions')\r\n        .update({ \r\n          status: 'failed',\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        })\r\n        .eq('id', transcriptionId)\r\n    } catch (e) {\r\n      console.log('Could not update error status:', e)\r\n    }\r\n    \r\n    throw error\r\n  }\r\n}\r\n\r\n// GET endpoint for checking transcription status\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url)\r\n    const transcriptionId = searchParams.get('id')\r\n    \r\n    if (!transcriptionId) {\r\n      return NextResponse.json({ error: 'Transcription ID required' }, { status: 400 })\r\n    }\r\n    \r\n    const { data, error } = await supabaseServer\r\n      .from('transcriptions')\r\n      .select('*')\r\n      .eq('id', transcriptionId)\r\n      .single()\r\n    \r\n    if (error || !data) {\r\n      return NextResponse.json({ error: 'Transcription not found' }, { status: 404 })\r\n    }\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      transcription: data\r\n    })\r\n    \r\n  } catch (error) {\r\n    console.error('Status check error:', error)\r\n    return NextResponse.json(\r\n      { error: 'Failed to check status' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}