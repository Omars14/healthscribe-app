{
  "name": "My workflow 22",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "medical-transcribe-v2",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "4208ca8e-34b9-4673-af55-f60008c8ed87",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -928,
        -80
      ],
      "webhookId": "medical-transcribe-v2"
    },
    {
      "parameters": {
        "url": "={{ $json.body.audioUrl }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          },
          "timeout": 30000
        }
      },
      "id": "c7de531e-8a27-4fe9-9892-4f4a91f35801",
      "name": "Download Audio",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -704,
        -96
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/audio/transcriptions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "whisper-1"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "timeout": 60000
        }
      },
      "id": "ad2a5a55-b9ea-43d3-974a-23b8e3094e31",
      "name": "Whisper Transcribe",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -512,
        -128
      ],
      "credentials": {
        "openAiApi": {
          "id": "lwRainkfkDaloiF3",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Get the transcription text and original webhook data\nconst whisperResult = $input.item.json;\nconst webhookData = $('Webhook').item.json.body;\n\n// Extract transcription\nconst transcriptionText = whisperResult.text || whisperResult.transcription || 'No transcription available';\n\n// Pass all data forward\nreturn {\n  // From webhook body\n  transcriptionId: webhookData.uploadId,\n  doctorName: webhookData.doctorName,\n  patientName: webhookData.patientName,\n  documentType: webhookData.documentType,\n  fileName: webhookData.fileName,\n  audioUrl: webhookData.audioUrl,\n  callbackUrl: webhookData.callbackUrl,\n  \n  // Transcription\n  rawTranscription: transcriptionText\n};"
      },
      "id": "dc67a3cb-672b-4155-84dd-d5afb289c283",
      "name": "Prepare for Gemini",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -288,
        -176
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Get Agent response and original data\nconst agentResponse = $input.item.json;\nconst originalData = $('Prepare for Gemini').item.json;\n\n// Try to extract formatted text from different possible shapes\nlet formattedText = '';\n\nif (typeof agentResponse === 'string') {\n  formattedText = agentResponse;\n} else if (agentResponse?.text && typeof agentResponse.text === 'string') {\n  formattedText = agentResponse.text;\n} else if (agentResponse?.output && typeof agentResponse.output === 'string') {\n  formattedText = agentResponse.output;\n} else if (agentResponse?.message?.content && Array.isArray(agentResponse.message.content)) {\n  const part = agentResponse.message.content[0];\n  if (part?.text) formattedText = part.text;\n}\n\n// Fallback to raw transcription if we couldn't get formatted text\nif (!formattedText) {\n  formattedText = originalData.rawTranscription || '';\n}\n\n// Add header and footer to create a complete formatted document\nconst finalDocument = `MEDICAL TRANSCRIPTION REPORT\n================================================================================\nDate: ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}\nDocument Type: ${(originalData.documentType || '').toUpperCase()}\nDoctor: ${originalData.doctorName || 'Unknown'}\nPatient: ${originalData.patientName || 'Unknown'}\nFile: ${originalData.fileName || ''}\nTranscription ID: ${originalData.transcriptionId || ''}\n================================================================================\n\n${formattedText}\n\n================================================================================\nEND OF MEDICAL RECORD\nTranscribed and formatted by AI Medical Transcription System\n================================================================================`;\n\n// Combine raw and formatted into a single transcription_text field\nconst combinedTranscription = `=== RAW TRANSCRIPTION ===\\n${originalData.rawTranscription || ''}\\n\\n=== FORMATTED DOCUMENT ===\\n${finalDocument}`;\n\nreturn {\n  transcriptionId: originalData.transcriptionId,\n  transcription_text: combinedTranscription,\n  doctor_name: originalData.doctorName,\n  patient_name: originalData.patientName,\n  document_type: originalData.documentType,\n  fileName: originalData.fileName,\n  audioUrl: originalData.audioUrl,\n  callbackUrl: originalData.callbackUrl,\n  status: 'completed',\n  processed_at: new Date().toISOString(),\n  formatted_document_for_response: finalDocument,\n  raw_transcription_for_response: originalData.rawTranscription\n};"
      },
      "id": "dd1499a7-1ac9-4c7b-b2f3-7995fa41d965",
      "name": "Finalize",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        128,
        -64
      ]
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://yaznemrwbingjwqutbvb.supabase.co/rest/v1/transcriptions?id=eq.{{ $json.transcriptionId }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inlhem5lbXJ3YmluZ2p3cXV0YnZiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTQ2MDQzMCwiZXhwIjoyMDcxMDM2NDMwfQ.9Ib029SJ7rGbBI4JMoEKacX4LMOZbzOedDZ9JGtuXas"
            },
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inlhem5lbXJ3YmluZ2p3cXV0YnZiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTQ2MDQzMCwiZXhwIjoyMDcxMDM2NDMwfQ.9Ib029SJ7rGbBI4JMoEKacX4LMOZbzOedDZ9JGtuXas"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "return=minimal"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({\n  transcription_text: $json.transcription_text,\n  status: 'completed',\n  doctor_name: $json.doctor_name,\n  patient_name: $json.patient_name,\n  document_type: $json.document_type,\n  updated_at: new Date().toISOString()\n}) }}",
        "options": {}
      },
      "id": "b3d71710-b78b-4897-a5ad-f1b207e205d4",
      "name": "Update Supabase",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        336,
        -64
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "success"
            },
            {
              "name": "message",
              "value": "Transcription completed"
            },
            {
              "name": "transcriptionId",
              "value": "={{ $('Finalize').item.json.transcriptionId }}"
            },
            {
              "name": "formatted_document",
              "value": "={{ $('Finalize').item.json.formatted_document_for_response }}"
            },
            {
              "name": "raw_transcription",
              "value": "={{ $('Finalize').item.json.raw_transcription_for_response }}"
            }
          ]
        },
        "options": {}
      },
      "id": "a4cc3a4f-154e-440c-b0ba-054f5a84eac0",
      "name": "Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        528,
        -64
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ `You are a professional medical transcriptionist.\n\nYour task: Format the raw transcription into a clean, professional ${$json.documentType || 'clinical'} document.\n\nDocument information:\n- Type: ${$json.documentType || 'Unknown'}\n- Doctor: ${$json.doctorName || 'Unknown'}\n- Patient: ${$json.patientName || 'Unknown'}\n- Date: ${new Date().toLocaleDateString()}\n- File: ${$json.fileName || ''}\n- Transcription ID: ${$json.transcriptionId || ''}\n\nRaw transcription:\n${$json.rawTranscription}\n\nInstructions:\n1) Correct medical terminology and grammar\n2) Use appropriate section headers for the document type\n3) Mark unclear sections with [?]\n4) If documentType is 'surgery', include: Preoperative Diagnosis, Postoperative Diagnosis, Procedure, Findings, Technique\n5) If documentType is 'consultation', include: Chief Complaint, History, Examination, Assessment, Plan\n\nOutput requirements:\n- Return ONLY the formatted document content.\n- Do not add any explanations or code fences.\n` }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -160,
        -320
      ],
      "id": "33cc1ddd-3a09-4e14-aa6f-e38ac35db83e",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-lite",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -160,
        0
      ],
      "id": "634501ee-5755-409e-8ae4-bd9a97edecc4",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "lvO6ZGov2y4ToxsL",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Download Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Audio": {
      "main": [
        [
          {
            "node": "Whisper Transcribe",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Whisper Transcribe": {
      "main": [
        [
          {
            "node": "Prepare for Gemini",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare for Gemini": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Finalize": {
      "main": [
        [
          {
            "node": "Update Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Supabase": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Finalize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "29772b3d-f669-48f8-85bc-089929c8238b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2a0869a9b2a39ad88a1fdc31d2904bca4a19ec1a7bbf1486bac7431c1fcb096b"
  },
  "id": "oORK94AfI41l2muz",
  "tags": []
}