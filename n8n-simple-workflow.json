{
  "name": "Simple Audio Transcription",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "upload",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [250, 300],
      "webhookId": "simple-audio-webhook"
    },
    {
      "parameters": {
        "functionCode": "// Get webhook data\nconst webhookData = $input.first().json;\n\n// Validate required fields\nif (!webhookData.audioFile) {\n  throw new Error('No audio data received');\n}\n\nif (!webhookData.uploadId) {\n  throw new Error('No uploadId provided');\n}\n\n// Log for debugging\nconsole.log('Processing audio for:', {\n  uploadId: webhookData.uploadId,\n  fileName: webhookData.fileName,\n  doctorName: webhookData.doctorName,\n  patientName: webhookData.patientName\n});\n\n// Convert base64 to buffer\nconst audioBuffer = Buffer.from(webhookData.audioFile, 'base64');\n\n// Save the audio temporarily (optional - for debugging)\n// const fs = require('fs');\n// fs.writeFileSync(`/tmp/${webhookData.uploadId}.mp3`, audioBuffer);\n\nreturn [{\n  json: webhookData,\n  binary: {\n    audio: {\n      data: audioBuffer,\n      mimeType: webhookData.fileType || 'audio/mpeg',\n      fileName: webhookData.fileName || 'audio.mp3'\n    }\n  }\n}];"
      },
      "id": "process",
      "name": "Process Audio",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/audio/transcriptions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "whisper-1"
            }
          ]
        },
        "sendBinaryData": true,
        "binaryPropertyName": "audio",
        "options": {}
      },
      "id": "whisper",
      "name": "OpenAI Whisper",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [650, 300],
      "credentials": {
        "openAiApi": {
          "id": "1",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/transcriptions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "id",
              "value": "=eq.{{ $('process').item.json.uploadId }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "transcription_text",
              "value": "={{ $json.text }}"
            },
            {
              "name": "status",
              "value": "completed"
            },
            {
              "name": "processed_at",
              "value": "={{ new Date().toISOString() }}"
            }
          ]
        },
        "options": {}
      },
      "id": "update",
      "name": "Update Supabase",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [850, 300],
      "credentials": {
        "supabaseApi": {
          "id": "2",
          "name": "Supabase"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "boolean": [
            {
              "name": "success",
              "value": true
            }
          ],
          "string": [
            {
              "name": "message",
              "value": "Transcription completed successfully"
            },
            {
              "name": "uploadId",
              "value": "={{ $('process').item.json.uploadId }}"
            },
            {
              "name": "status",
              "value": "completed"
            }
          ],
          "number": [
            {
              "name": "textLength",
              "value": "={{ $('whisper').item.json.text.length }}"
            }
          ]
        },
        "options": {}
      },
      "id": "response",
      "name": "Format Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1050, 300]
    }
  ],
  "connections": {
    "webhook": {
      "main": [
        [
          {
            "node": "process",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process": {
      "main": [
        [
          {
            "node": "whisper",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "whisper": {
      "main": [
        [
          {
            "node": "update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update": {
      "main": [
        [
          {
            "node": "response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1.0.0",
  "tags": [],
  "pinData": {},
  "staticData": null
}
